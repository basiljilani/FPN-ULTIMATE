AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Infrastructure for FinTech Pulse Web App
Resources:
  UserDataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: user-data
      AttributeDefinitions:
      - AttributeName: UserID
        AttributeType: S
      KeySchema:
      - AttributeName: UserID
        KeyType: HASH
      BillingMode: PAY_PER_REQUEST
  FintechUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: FintechUserPool
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireUppercase: true
          RequireNumbers: true
          RequireSymbols: true
      AutoVerifiedAttributes:
      - email
      Schema:
      - Name: email
        Required: true
        Mutable: true
      - Name: name
        Required: false
        Mutable: true
      UsernameAttributes:
      - email
      AccountRecoverySetting:
        RecoveryMechanisms:
        - Name: verified_email
          Priority: 1
  FintechAppClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: FintechClient
      UserPoolId:
        Ref: FintechUserPool
      GenerateSecret: false
      ExplicitAuthFlows:
      - ALLOW_USER_PASSWORD_AUTH
      - ALLOW_REFRESH_TOKEN_AUTH
      - ALLOW_USER_SRP_AUTH
      PreventUserExistenceErrors: ENABLED
      AllowedOAuthFlows:
      - code
      - implicit
      AllowedOAuthScopes:
      - email
      - openid
      - profile
      CallbackURLs:
      - https://fintechpulse.net/callback
      LogoutURLs:
      - https://fintechpulse.net/logout
      SupportedIdentityProviders:
      - COGNITO
  FintechIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: FintechIdentityPool
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
      - ClientId:
          Ref: FintechAppClient
        ProviderName:
          Fn::GetAtt:
          - FintechUserPool
          - ProviderName
  FintechPulseApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: FintechPulseAPI
      StageName: dev
      Auth:
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn:
              Fn::GetAtt:
              - FintechUserPool
              - Arn
            Identity:
              Header: Authorization
        DefaultAuthorizer: CognitoAuthorizer
      Cors:
        AllowMethods: '''GET,POST,PUT,DELETE,OPTIONS'''
        AllowHeaders: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
        AllowOrigin: '''https://fintechpulse.net'''
        MaxAge: '''600'''
  SaveUserDataFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/saveUserData.handler
      Runtime: nodejs18.x
      CodeUri: SaveUserDataFunction
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: UserDataTable
      Environment:
        Variables:
          TABLE_NAME:
            Ref: UserDataTable
          USER_POOL_ID:
            Ref: FintechUserPool
          CLIENT_ID:
            Ref: FintechAppClient
      Events:
        UserDataAPI:
          Type: Api
          Properties:
            RestApiId:
              Ref: FintechPulseApi
            Path: /userdata
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer
    Metadata:
      SamResourceId: SaveUserDataFunction
  AdminRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: AdminAccessPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:Query
            - dynamodb:Scan
            Resource:
              Fn::GetAtt:
              - UserDataTable
              - Arn
  AdminGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: Admin
      UserPoolId:
        Ref: FintechUserPool
      RoleArn:
        Fn::GetAtt:
        - AdminRole
        - Arn
  AddContentFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/addContent.handler
      Runtime: nodejs18.x
      CodeUri: AddContentFunction
      Role:
        Fn::GetAtt:
        - AdminRole
        - Arn
      Environment:
        Variables:
          TABLE_NAME:
            Ref: UserDataTable
      Events:
        AddContentAPI:
          Type: Api
          Properties:
            RestApiId:
              Ref: FintechPulseApi
            Path: /content
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer
    Metadata:
      SamResourceId: AddContentFunction
  UpdateContentFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/updateContent.handler
      Runtime: nodejs18.x
      CodeUri: UpdateContentFunction
      Role:
        Fn::GetAtt:
        - AdminRole
        - Arn
      Environment:
        Variables:
          TABLE_NAME:
            Ref: UserDataTable
      Events:
        UpdateContentAPI:
          Type: Api
          Properties:
            RestApiId:
              Ref: FintechPulseApi
            Path: /content/{id}
            Method: PUT
            Auth:
              Authorizer: CognitoAuthorizer
    Metadata:
      SamResourceId: UpdateContentFunction
  DeleteContentFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/deleteContent.handler
      Runtime: nodejs18.x
      CodeUri: DeleteContentFunction
      Role:
        Fn::GetAtt:
        - AdminRole
        - Arn
      Environment:
        Variables:
          TABLE_NAME:
            Ref: UserDataTable
      Events:
        DeleteContentAPI:
          Type: Api
          Properties:
            RestApiId:
              Ref: FintechPulseApi
            Path: /content/{id}
            Method: DELETE
            Auth:
              Authorizer: CognitoAuthorizer
    Metadata:
      SamResourceId: DeleteContentFunction
Outputs:
  ApiUrl:
    Description: API Gateway URL
    Value:
      Fn::Sub: https://${FintechPulseApi}.execute-api.${AWS::Region}.amazonaws.com/dev/
  CognitoUserPoolId:
    Description: Cognito User Pool ID
    Value:
      Ref: FintechUserPool
  CognitoUserPoolClientId:
    Description: Cognito App Client ID
    Value:
      Ref: FintechAppClient
  CognitoIdentityPoolId:
    Description: Cognito Identity Pool ID
    Value:
      Ref: FintechIdentityPool
