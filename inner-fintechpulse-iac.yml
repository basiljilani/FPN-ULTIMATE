AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Infrastructure for FinTech Pulse

Resources:
  # DynamoDB Table
  UserDataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: user-data
      AttributeDefinitions:
        - AttributeName: UserID
          AttributeType: S
      KeySchema:
        - AttributeName: UserID
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  # Cognito User Pool
  FintechUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: FintechUserPool
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireUppercase: true
          RequireNumbers: true
          RequireSymbols: true
      AutoVerifiedAttributes:
        - email

  # Cognito App Client
  FintechAppClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: FintechClient
      UserPoolId: !Ref FintechUserPool
      GenerateSecret: false

  # Cognito Authorizer
  FintechCognitoAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: CognitoAuthorizer
      IdentitySource: method.request.header.Authorization
      RestApiId: !Ref FintechPulseApi
      Type: COGNITO_USER_POOLS
      ProviderARNs:
        - !GetAtt FintechUserPool.Arn

  # API Gateway
  FintechPulseApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: FintechPulseAPI
      StageName: dev
      Auth:
        DefaultAuthorizer: FintechCognitoAuthorizer
        ApiKeyRequired: false

  # Lambda Function for User Data
  SaveUserDataFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/saveUserData.handler
      Runtime: nodejs18.x
      CodeUri: ./src
      Policies:
        - DynamoDBCrudPolicy:
            TableName: user-data
      Environment:
        Variables:
          TABLE_NAME: user-data
      Events:
        UserDataAPI:
          Type: Api
          Properties:
            RestApiId: !Ref FintechPulseApi
            Path: /userdata
            Method: POST

  # Admin IAM Role
  AdminRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AdminLambdaRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AdminAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: !GetAtt UserDataTable.Arn
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"

  # Admin Cognito Group
  AdminGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: Admin
      UserPoolId: !Ref FintechUserPool
      RoleArn: !GetAtt AdminRole.Arn

  # Admin API Gateway Routes
  AdminAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: AdminApi
      StageName: dev
      Auth:
        DefaultAuthorizer: FintechCognitoAuthorizer
      Events:
        AddContent:
          Type: Api
          Properties:
            Path: /admin/add-content
            Method: POST
            RestApiId: !Ref FintechPulseApi
        UpdateContent:
          Type: Api
          Properties:
            Path: /admin/update-content
            Method: PUT
            RestApiId: !Ref FintechPulseApi
        DeleteContent:
          Type: Api
          Properties:
            Path: /admin/delete-content
            Method: DELETE
            RestApiId: !Ref FintechPulseApi

  # Admin Lambda Functions
  AddContentFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/addContent.handler
      Runtime: nodejs18.x
      CodeUri: ./src
      Role: !GetAtt AdminRole.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: user-data

  UpdateContentFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/updateContent.handler
      Runtime: nodejs18.x
      CodeUri: ./src
      Role: !GetAtt AdminRole.Arn

  DeleteContentFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/deleteContent.handler
      Runtime: nodejs18.x
      CodeUri: ./src
      Role: !GetAtt AdminRole.Arn
