AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Infrastructure for FinTech Pulse Web App

Resources:
 # DynamoDB Table
 UserDataTable:
   Type: AWS::DynamoDB::Table
   Properties:
     TableName: user-data
     AttributeDefinitions:
       - AttributeName: UserID
         AttributeType: S
     KeySchema:
       - AttributeName: UserID
         KeyType: HASH
     BillingMode: PAY_PER_REQUEST

 # Cognito User Pool
 FintechUserPool:
   Type: AWS::Cognito::UserPool
   Properties:
     UserPoolName: FintechUserPool
     Policies:
       PasswordPolicy:
         MinimumLength: 8
         RequireLowercase: true
         RequireUppercase: true
         RequireNumbers: true
         RequireSymbols: true
     AutoVerifiedAttributes:
       - email
     Schema:
       - Name: email
         Required: true
         Mutable: true
       - Name: name
         Required: false
         Mutable: true
     UsernameAttributes:
       - email
     AccountRecoverySetting:
       RecoveryMechanisms:
         - Name: verified_email
           Priority: 1

 # Cognito App Client
 FintechAppClient:
   Type: AWS::Cognito::UserPoolClient
   Properties:
     ClientName: FintechClient
     UserPoolId: !Ref FintechUserPool
     GenerateSecret: false
     ExplicitAuthFlows:
       - ALLOW_USER_PASSWORD_AUTH
       - ALLOW_REFRESH_TOKEN_AUTH
       - ALLOW_USER_SRP_AUTH
     PreventUserExistenceErrors: ENABLED
     AllowedOAuthFlows:
       - code
       - implicit
     AllowedOAuthScopes:
       - email
       - openid
       - profile
     CallbackURLs:
       - https://fintechpulse.net/callback
     LogoutURLs:
       - https://fintechpulse.net/logout
     SupportedIdentityProviders:
       - COGNITO

 # Cognito Identity Pool
 FintechIdentityPool:
   Type: AWS::Cognito::IdentityPool
   Properties:
     IdentityPoolName: FintechIdentityPool
     AllowUnauthenticatedIdentities: false
     CognitoIdentityProviders:
       - ClientId: !Ref FintechAppClient
         ProviderName: !GetAtt FintechUserPool.ProviderName

 # API Gateway with integrated Cognito Authorizer
 FintechPulseApi:
   Type: AWS::Serverless::Api
   Properties:
     Name: FintechPulseAPI
     StageName: dev
     Auth:
       Authorizers:
         CognitoAuthorizer:
           UserPoolArn: !GetAtt FintechUserPool.Arn
           Identity:
             Header: Authorization
       DefaultAuthorizer: CognitoAuthorizer
     Cors:
       AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
       AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
       AllowOrigin: "'https://fintechpulse.net'"
       MaxAge: "'600'"

 # Lambda Function for User Data
 SaveUserDataFunction:
   Type: AWS::Serverless::Function
   Properties:
     Handler: handlers/saveUserData.handler
     Runtime: nodejs18.x
     CodeUri: ./src-1-backend
     Policies:
       - DynamoDBCrudPolicy:
           TableName: !Ref UserDataTable
     Environment:
       Variables:
         TABLE_NAME: !Ref UserDataTable
         USER_POOL_ID: !Ref FintechUserPool
         CLIENT_ID: !Ref FintechAppClient
     Events:
       UserDataAPI:
         Type: Api
         Properties:
           RestApiId: !Ref FintechPulseApi
           Path: /userdata
           Method: POST
           Auth:
             Authorizer: CognitoAuthorizer

 # Admin IAM Role
 AdminRole:
   Type: AWS::IAM::Role
   Properties:
     AssumeRolePolicyDocument:
       Version: '2012-10-17'
       Statement:
         - Effect: Allow
           Principal:
             Service: lambda.amazonaws.com
           Action: sts:AssumeRole
     ManagedPolicyArns:
       - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
     Policies:
       - PolicyName: AdminAccessPolicy
         PolicyDocument:
           Version: '2012-10-17'
           Statement:
             - Effect: Allow
               Action:
                 - dynamodb:PutItem
                 - dynamodb:UpdateItem
                 - dynamodb:DeleteItem
                 - dynamodb:Query
                 - dynamodb:Scan
               Resource: !GetAtt UserDataTable.Arn

 # Admin Cognito Group
 AdminGroup:
   Type: AWS::Cognito::UserPoolGroup
   Properties:
     GroupName: Admin
     UserPoolId: !Ref FintechUserPool
     RoleArn: !GetAtt AdminRole.Arn

 # Amplify Service Role
 AmplifyServiceRole:
   Type: AWS::IAM::Role
   Properties:
     RoleName: AmplifyServiceRole-FintechPulse
     AssumeRolePolicyDocument:
       Version: '2012-10-17'
       Statement:
         - Effect: Allow
           Principal:
             Service: amplify.amazonaws.com
           Action: sts:AssumeRole
     ManagedPolicyArns:
       - arn:aws:iam::aws:policy/AdministratorAccess-Amplify
     Policies:
       - PolicyName: AmplifyDeploymentPolicy
         PolicyDocument:
           Version: '2012-10-17'
           Statement:
             - Effect: Allow
               Action:
                 - cognito-idp:*
                 - cognito-identity:*
                 - apigateway:*
                 - execute-api:*
               Resource: '*'

 # Identity Pool Role
 IdentityPoolRole:
   Type: AWS::IAM::Role
   Properties:
     AssumeRolePolicyDocument:
       Version: '2012-10-17'
       Statement:
         - Effect: Allow
           Principal:
             Federated: cognito-identity.amazonaws.com
           Action: sts:AssumeRoleWithWebIdentity
           Condition:
             StringEquals:
               'cognito-identity.amazonaws.com:aud': !Ref FintechIdentityPool
     Policies:
       - PolicyName: CognitoAuthorizedPolicy
         PolicyDocument:
           Version: '2012-10-17'
           Statement:
             - Effect: Allow
               Action:
                 - execute-api:Invoke
               Resource: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${FintechPulseApi}/*'

 # Admin Lambda Functions
 AddContentFunction:
   Type: AWS::Serverless::Function
   Properties:
     Handler: handlers/addContent.handler
     Runtime: nodejs18.x
     CodeUri: ./src-1-backend
     Role: !GetAtt AdminRole.Arn
     Environment:
       Variables:
         TABLE_NAME: !Ref UserDataTable
     Events:
       AddContentAPI:
         Type: Api
         Properties:
           RestApiId: !Ref FintechPulseApi
           Path: /content
           Method: POST
           Auth:
             Authorizer: CognitoAuthorizer

 UpdateContentFunction:
   Type: AWS::Serverless::Function
   Properties:
     Handler: handlers/updateContent.handler
     Runtime: nodejs18.x
     CodeUri: ./src-1-backend
     Role: !GetAtt AdminRole.Arn
     Environment:
       Variables:
         TABLE_NAME: !Ref UserDataTable
     Events:
       UpdateContentAPI:
         Type: Api
         Properties:
           RestApiId: !Ref FintechPulseApi
           Path: /content/{id}
           Method: PUT
           Auth:
             Authorizer: CognitoAuthorizer

 DeleteContentFunction:
   Type: AWS::Serverless::Function
   Properties:
     Handler: handlers/deleteContent.handler
     Runtime: nodejs18.x
     CodeUri: ./src-1-backend
     Role: !GetAtt AdminRole.Arn
     Environment:
       Variables:
         TABLE_NAME: !Ref UserDataTable
     Events:
       DeleteContentAPI:
         Type: Api
         Properties:
           RestApiId: !Ref FintechPulseApi
           Path: /content/{id}
           Method: DELETE
           Auth:
             Authorizer: CognitoAuthorizer

Outputs:
 ApiUrl:
   Description: API Gateway URL
   Value: !Sub "https://${FintechPulseApi}.execute-api.${AWS::Region}.amazonaws.com/dev/"
 CognitoUserPoolId:
   Description: Cognito User Pool ID
   Value: !Ref FintechUserPool
 CognitoUserPoolClientId:
   Description: Cognito App Client ID
   Value: !Ref FintechAppClient
 CognitoIdentityPoolId:
   Description: Cognito Identity Pool ID
   Value: !Ref FintechIdentityPool
 AmplifyServiceRoleArn:
   Description: Amplify Service Role ARN
   Value: !GetAtt AmplifyServiceRole.Arn